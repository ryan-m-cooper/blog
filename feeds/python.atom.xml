<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Maptastik!</title><link href="http://ryan-m-cooper.com/blog/" rel="alternate"></link><link href="http://ryan-m-cooper.com/blog/feeds/python.atom.xml" rel="self"></link><id>http://ryan-m-cooper.com/blog/</id><updated>2018-01-14T16:56:00-05:00</updated><entry><title>Remote GeoJSON to GeoDataFrame</title><link href="http://ryan-m-cooper.com/blog/remote-geojson-to-geodataframe.html" rel="alternate"></link><published>2018-01-14T16:56:00-05:00</published><updated>2018-01-14T16:56:00-05:00</updated><author><name>Ryan Cooper</name></author><id>tag:ryan-m-cooper.com,2017-11-01:blog/remote-geojson-to-geodataframe.html</id><summary type="html">&lt;h1&gt;Remote GeoJSON to GeoDataFrame&lt;/h1&gt;
&lt;p&gt;I’m inspired by Stephen Smith’s &lt;a href="https://medium.com/@TheMapSmith/messin-around-with-maps-ce3a3ffd86c"&gt;quick post&lt;/a&gt; about rapid prototyping during his lunch break. Lately I’ve been using my lunch break to watch videos that are both related to the work I do for the City of Raleigh Park, Recreation &amp;amp; Cultural Resources Department and of interest to me. But sometimes I’d rather just mess around while I eat my turkey sandwich. I did just that today.&lt;/p&gt;
&lt;p&gt;We’re an Esri shop here at City of Raleigh, so most of my day-to-day is spent in that ecosystem. That said, I’ve been really interested in the Python library &lt;strong&gt;&lt;a href="http://geopandas.org/index.html"&gt;geopandas&lt;/a&gt;&lt;/strong&gt; for a bit now and wanted to spend my lunch with it.&lt;/p&gt;
&lt;p&gt;One thing that’s great about geopandas is that you can read in all sorts of different data using &lt;code&gt;gpd.read_file()&lt;/code&gt;. That’s great if you have a Shapefile or some GeoJSON on your machine. But what if you want to pull in some data from a URL? &lt;code&gt;gpd.read_file()&lt;/code&gt; isn’t going to work.&lt;/p&gt;
&lt;p&gt;So during lunch I messed around (e.g. Wrote some Python using &lt;a href="https://github.com/spyder-ide"&gt;Spyder&lt;/a&gt;, Googled things, ducked into &lt;a href="https://stackoverflow.com/questions/37728540/create-a-geodataframe-from-a-geojson-object"&gt;Stack Overflow&lt;/a&gt;) and cobbled together a little function that takes a URL pointing to some GeoJSON as an input and returns a GeoDataFrame:&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/6030df87e8bd62fa583a83ecea9fceab.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;import requests, json, geopandas as gpd

def remoteGeoJSONToGDF(url, display = False):
    """Import remote GeoJSON to a GeoDataFrame
    Keyword arguments:
    url -- URL to GeoJSON resource on web
    display -- Displays geometries upon loading (default: False)
    """
    r = requests.get(url)
    data = r.json()
    gdf = gpd.GeoDataFrame.from_features(data['features'])
    if display:
        gdf.plot()
    return gdf&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;What’s going on here? We use &lt;code&gt;requests&lt;/code&gt; to get our GeoJSON from the URL we pass. We then create a GeoDataFrame, &lt;code&gt;gdf&lt;/code&gt;, by using &lt;code&gt;gpd.GeoDataFrame.from_features()&lt;/code&gt; iterate through the features in our GeoJSON. Finally, we return &lt;code&gt;gdf&lt;/code&gt; so that we can access our newly created GeoDataFrame for plotting or doing further analysis. There’s also an option to plot the result if you want. Just set &lt;code&gt;display&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; when you call the function.&lt;/p&gt;
&lt;p&gt;For example, let’s say we want to look at the City of Raleigh council districts:&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/803cbff714ca3353b62baa2c612905ee.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;districts = remoteGeoJSONToGDF('http://data-ral.opendata.arcgis.com/datasets/9a5733e13dd14e2f80f8517738ce8cc6_2.geojson')
districts.plot(column = 'COUNCIL_DIST')&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;In line 1 we pass the URL of council district GeoJSON on &lt;a href="http://data-ral.opendata.arcgis.com/"&gt;Raleigh’s open data site&lt;/a&gt; and assign the returned GeoDataFrame to a variable, &lt;code&gt;districts&lt;/code&gt;. We can then use geopandas (but really matplotlib) to plot the GeoDataFrame.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Plot of Raleigh city council districts generated from remote GeoJSON" src="http://ryan-m-cooper.com/blog/images/remote-geojson-to-geodataframe_1.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is a pretty narrow use case for this code and I’m sure there are lots of ways to bork it. Still, I hope you find it useful!&lt;/p&gt;</summary><category term="geopandas"></category><category term="geojson"></category><category term="Python Pandas"></category><category term="Python"></category></entry></feed>